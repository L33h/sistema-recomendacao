# -*- coding: utf-8 -*-
"""aulaTres.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Adi3otMTyMGze3TAp-dE1vpv6dj46o4u
"""

# Importando as bibliotecas necessárias

import numpy as np
from sklearn.cluster import KMeans

# Matriz com os filmes assistidos

filmes_assistidos = np.array([
    [1,0,0,1,0,0],
    [1,1,0,0,1,1],
    [0,1,1,0,1,0],
    [0,0,1,1,1,0],
    [1,0,1,0,0,1],
    [0,1,0,1,0,1],
    [1,0,0,1,0,0],
    [1,1,0,0,1,1],
    [0,1,1,0,1,0],
    [0,0,1,1,1,0],
    [1,0,1,0,0,1],
    [1,1,1,1,0,1]

])

# Definição da quantidade de grupos (cluster)

num_cluster = 2

# inicializar o modelo

kmeans = KMeans (n_clusters=num_cluster, random_state=0, n_init=10)

# Treinando o modelo

kmeans.fit(filmes_assistidos)

# Classificando os grupos (usuarios)

grupos_indice = kmeans.predict(filmes_assistidos)

#Exibindo os dados
print("Usuario pertence ao seguinte grupo:")
for i, cluster in enumerate(grupos_indice):
  print(f"Usuario {i+1} pertence ao grupo {cluster+1}")

  print("\nFilmes assistidos:")
  for i in range(len(filmes_assistidos)):
    assistidos = np.where(filmes_assistidos[i] == 1)[0]+1
    print(f"Usuário {i+1} assistiu aos filmes: {assistidos}")

# Função de recomendar filmes
def recomender_filmes(filmes, filmes_assistidos, grupos_indice):

  filmes = np.array(filmes)

  # Encontrar o grupo do usuário com base em seu vetor de filmes assistidos
  usuario_Id = len(filmes_assistidos)
  grupo_usuario = kmeans.predict([filmes])[0]

  # Encontrar todos os usuários no mesmo grupo
  usuario_no_mesmo_grupo = [i for i in range(len(grupos_indice)) if grupos_indice[i] == grupo_usuario]

  # Filmes assistidos pelos usuários no mesmo grupo
  filmes_recomendados = set()
  for usuario in usuario_no_mesmo_grupo:
    filmes_assistidos_usuario = np.where(filmes_assistidos[usuario] == 1)[0]
    filmes_recomendados.update(filmes_assistidos_usuario)

  # Remover filmes que o usuário já assistiu
  filmes_recomendados = filmes_recomendados - set(np.where(filmes == 1)[0])

  # Ajustar os ídices dos filmes recomendados (de volta para 1-based)
  filmes_recomendados = [filme + 1 for filme in filmes_recomendados]

  return sorted(filmes_recomendados)

  # Ajustar os índices dos filmes recomendados (de volta para 1-based)
  filmes_recomendados =[filme + 1 for filme in filmes_recomendados]
  return sorted(filmes_recomendados)

  # Exemplo de uso de função recomendar filmes
  filmes_asssistidos_usuario =[1, 0, 1, 0]

  # Vetor de filmes assistidos (tipo, assistiu aos filmes 1 e 3)
  filmes_recomendados = recomendar_filmes(filmes_assistidos_usuario, filmes_assistidos, grupo_indice)

  print(f"\nFilmes recomendados: {filmes_recomendados}")